{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","getUsers","a","fetch","userResponse","json","users","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAIaA,EAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACC,qBACCC,IAAG,+BAA0BF,EAAMG,QACjCC,GADC,0BAEHC,IAAI,YAEL,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCNPC,G,MAAW,SAACR,GAAD,OACvB,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAACP,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLTO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,uBACCZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCCNG,G,wDACL,aAAe,IAAD,8BACb,gBA6BDH,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA5BtC,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IALD,E,qDASd,WAAqB,IAAD,OACbI,EAAQ,uCAAG,8BAAAC,EAAA,+EAEYC,MAC1B,8CAHc,cAETC,EAFS,gBAKKA,EAAaC,OALlB,OAKTC,EALS,OAMf,EAAKV,SAAS,CAAET,SAAUmB,IANX,kDAQfC,QAAQC,IAAR,oCARe,0DAAH,qDAYdP,M,oBAYD,WACC,MAAkCQ,KAAKT,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZa,EAAmBvB,EAASwB,QAAO,SAAC9B,GAAD,OACxCA,EAAQG,KAAK4B,cAAcC,SAAShB,EAAYe,kBAEjD,OACC,sBAAKjC,UAAU,MAAf,UACC,kDACA,cAAC,EAAD,CACCW,YAAY,iBACZC,aAAckB,KAAKlB,eAEpB,cAAC,EAAD,CAAUJ,SAAUuB,W,GA/CNI,cAqDHpB,ICnDAqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.c57f9562.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n\t<div className='card-container'>\r\n\t\t<img\r\n\t\t\tsrc={`https://robohash.org/${props.monster\r\n\t\t\t\t.id}?set=set2&size=180x180`}\r\n\t\t\talt='monster'\r\n\t\t/>\r\n\t\t<h2>{props.monster.name}</h2>\r\n\t\t<p>{props.monster.email}</p>\r\n\t</div>\r\n);\r\n ","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component.jsx';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => (\r\n\t<div className='card-list'>\r\n\t\t{props.monsters.map((monster) => (\r\n\t\t\t<Card key={monster.id} monster={monster} />\r\n\t\t))}\r\n\t</div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n\t<input\r\n\t\tclassName='search'\r\n\t\ttype='search'\r\n\t\tplaceholder={placeholder}\r\n\t\tonChange={handleChange}\r\n\t/>\r\n);\r\n","import { Component } from 'react';\r\n\r\nimport { CardList } from './components/card-list/card-list.component.jsx';\r\n\r\nimport { Card } from './components/card/card.component.jsx';\r\n\r\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\tmonsters: [],\r\n\t\t\tsearchField: ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst getUsers = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst userResponse = await fetch(\r\n\t\t\t\t\t'https://jsonplaceholder.typicode.com/users'\r\n\t\t\t\t);\r\n\t\t\t\tconst users = await userResponse.json();\r\n\t\t\t\tthis.setState({ monsters: users });\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(`Here is your error ${error}`);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tgetUsers();\r\n\t}\r\n\r\n\t// \tfetch('https://jsonplaceholder.typicode.com/users').then((response) =>\r\n\t// \t\tresponse.json().then((users) => this.setState({ monsters: users }))\r\n\t// \t);\r\n\t// }\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({ searchField: e.target.value });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { monsters, searchField } = this.state;\r\n\t\tconst filteredMonsters = monsters.filter((monster) =>\r\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<h1>Monsters Rolodex</h1>\r\n\t\t\t\t<SearchBox\r\n\t\t\t\t\tplaceholder='search Monster'\r\n\t\t\t\t\thandleChange={this.handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<CardList monsters={filteredMonsters} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}